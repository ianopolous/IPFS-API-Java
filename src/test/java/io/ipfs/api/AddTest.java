package io.ipfs.api;

import io.ipfs.multibase.*;
import org.junit.*;

import java.io.*;
import java.net.*;

public class AddTest {

    @Test
    public void add() throws IOException, URISyntaxException {
        String boundary = "At7ncPkda6xyWozoimjCd6aRySM13bEH";
        byte[] multipartBody = BlockEncoding.Base64.decode("");
        HttpURLConnection httpConn = (HttpURLConnection) new URL("http://localhost:5001/api/v0/add?stream-channels=true&w=false&n=true").openConnection();
//        httpConn.setUseCaches(false);
        httpConn.setDoOutput(true);
        httpConn.setDoInput(true);
        httpConn.setRequestProperty("User-Agent", "Java IPFS Client");
        httpConn.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
        httpConn.getOutputStream().write(multipartBody);
        httpConn.getOutputStream().flush();
        httpConn.getOutputStream().close();

        int status = httpConn.getResponseCode();
        StringBuilder b = new StringBuilder();
        if (status == HttpURLConnection.HTTP_OK) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(httpConn.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                b.append(line);
            }
            reader.close();
            httpConn.disconnect();
        }
        if (b.toString().contains("rror"))
             throw new IllegalStateException("Error returned from IPFS: " + b.toString());
        System.out.println(b.toString());
    }

    public static void main(String[] a) throws Exception {
        new AddTest().add();
    }
}
